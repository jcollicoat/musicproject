@import 'styles/constants.scss';

$trigger-size: 30px;
$menu-offset: calc(100% + $space-m / 2);

.wrapper {
    --background-color: #{$color-grey-3};
    --box-shadow-color: rgb(0, 0, 0);
    --image-overlay-background-color: rgba(0, 0, 0, 0.8);
    --trigger-color: #{$color-grey-6};
    --trigger-hover-background-color: #{$color-grey-3};
}

:global(.theme-light) .wrapper {
    --background-color: #{$color-grey-9};
    --box-shadow-color: rgba(0, 0, 0, 0.35);
    --image-overlay-background-color: rgba(255, 255, 255, 0.8);
    --trigger-color: #{$color-grey-4};
    --trigger-hover-background-color: #{$color-grey-8};
}

.wrapper {
    display: inline-flex;
    position: relative;

    .trigger {
        background-color: transparent;
        border: none;
        border-radius: 50%;
        color: var(--trigger-color);
        cursor: pointer;
        height: $trigger-size;
        outline: 0px solid var(--trigger-hover-background-color);
        // overflow: hidden;
        padding: 0;
        position: relative;
        transition: $transition;
        transition-property: background-color, color, outline-width;
        width: $trigger-size;

        &::before {
            border-radius: 50%;
            content: '';
            height: 100%;
            left: 0;
            outline: 1px dashed transparent;
            outline-offset: 2px;
            pointer-events: none;
            position: absolute;
            top: 0;
            transition: $transition;
            transition-property: outline-color;
            width: 100%;
            z-index: 3;
        }

        &:hover {
            background-color: var(--trigger-hover-background-color);
            outline-width: 3px;
        }

        &:focus-visible {
            &::before {
                outline-color: currentColor;
            }
        }

        img,
        svg {
            border-radius: 50%;
            position: absolute;
        }

        img {
            left: 0;
            z-index: 2;
        }

        svg {
            transition: $transition background-color;
            z-index: 1;
        }

        &.open {
            z-index: calc($z-overlay + 1);

            img ~ div > svg {
                background-color: var(--image-overlay-background-color);
                z-index: 4;
            }
        }
    }

    .menu {
        background-color: var(--background-color);
        border-radius: 4px;
        box-shadow: 0px 0px 12px var(--box-shadow-color);
        margin: 0;
        opacity: 0;
        outline: 3px solid var(--background-color);
        padding: 0;
        pointer-events: none;
        position: absolute;
        top: $menu-offset;
        transform: translateX(-50%) scale(0.95);
        transform-origin: top center;
        transition: $transition;
        transition-property: opacity, transform;
        width: clamp(180px, 240px, 75vw);
        z-index: $z-overlay;

        &::before {
            border-radius: calc($trigger-size / 2) calc($trigger-size / 2) 0 0;
            content: '';
            height: calc($trigger-size + 3px);
            left: calc(50% - ($trigger-size / 2));
            outline: 3px solid transparent;
            pointer-events: none;
            position: absolute;
            top: calc(neg($trigger-size) - 6px);
            transform: scaleX(0.85);
            transition: $transition;
            transition-property: background-color, outline-color, transform;
            width: $trigger-size;
            z-index: 1;
        }

        &.open {
            opacity: 1;
            pointer-events: auto;
            transform: translateX(-50%) scale(1);

            &::before {
                background-color: var(--background-color);
                outline-color: var(--background-color);
                transform: scale(1);
            }
        }

        &.left {
            transform: translateX(calc(-100% + $trigger-size + $space-m))
                scale(0.95);
            transform-origin: top right;

            &.open {
                transform: translateX(calc(-100% + $trigger-size + $space-m))
                    scale(1);
            }

            &::before {
                left: calc(100% - $trigger-size - $space-m);
            }
        }

        &.right {
            transform: translateX(neg($space-m)) scale(0.95);
            transform-origin: top left;

            &.open {
                opacity: 1;
                transform: translateX(neg($space-m)) scale(1);
            }

            &::before {
                left: $space-m;
            }
        }

        li {
            list-style-type: none;
            margin-bottom: 2px;

            &:last-child {
                margin-bottom: 0;
            }

            .button {
                border-radius: 2px;
            }
        }
    }
}
